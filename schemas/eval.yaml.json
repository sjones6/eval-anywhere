{
  "$ref": "#/$defs/EvalAnywhereEvaluation",
  "$defs": {
    "EvalAnywhereEvaluation": {
      "type": "object",
      "properties": {
        "checks": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "An optional name describing the check."
                  },
                  "id": {
                    "type": "string",
                    "const": "profanity"
                  },
                  "model": {
                    "type": "string",
                    "enum": [
                      "anthropic@claude-3-5-sonnet-20241022",
                      "anthropic@claude-3-5-sonnet-latest",
                      "anthropic@claude-3-5-haiku-20241022",
                      "anthropic@claude-3-5-haiku-latest",
                      "anthropic@claude-3-opus-20240229",
                      "anthropic@claude-3-opus-latest",
                      "anthropic@claude-3-sonnet-20240229",
                      "anthropic@claude-3-haiku-20240307",
                      "bedrock@ai21.jamba-1-5-large-v1:0",
                      "bedrock@ai21.jamba-1-5-mini-v1:0",
                      "bedrock@ai21.jamba-instruct-v1:0",
                      "bedrock@amazon.nova-lite-v1:0",
                      "bedrock@amazon.nova-micro-v1:0",
                      "bedrock@amazon.nova-pro-v1:0",
                      "bedrock@amazon.rerank-v1:0",
                      "bedrock@amazon.titan-embed-text-v1",
                      "bedrock@amazon.titan-embed-text-v2:0",
                      "bedrock@amazon.titan-text-express-v1",
                      "bedrock@amazon.titan-text-lite-v1",
                      "bedrock@amazon.titan-text-premier-v1:0",
                      "bedrock@amazon.titan-tg1-large",
                      "bedrock@anthropic.claude-v2",
                      "bedrock@anthropic.claude-v2:1",
                      "bedrock@anthropic.claude-3-haiku-20240307-v1:0",
                      "bedrock@anthropic.claude-3-opus-20240229-v1:0",
                      "bedrock@anthropic.claude-3-sonnet-20240229-v1:0",
                      "bedrock@anthropic.claude-3-5-haiku-20241022-v1:0",
                      "bedrock@anthropic.claude-3-5-sonnet-20240620-v1:0",
                      "bedrock@anthropic.claude-3-5-sonnet-20241022-v2:0",
                      "bedrock@anthropic.claude-instant-v1",
                      "bedrock@cohere.command-text-v14",
                      "bedrock@cohere.command-light-text-v14",
                      "bedrock@cohere.command-r-v1:0",
                      "bedrock@cohere.command-r-plus-v1:0",
                      "bedrock@cohere.embed-english-v3",
                      "bedrock@cohere.embed-multilingual-v3",
                      "bedrock@cohere.rerank-v3-5:0",
                      "bedrock@meta.llama3-70b-instruct-v1:0",
                      "bedrock@meta.llama3-8b-instruct-v1:0",
                      "bedrock@meta.llama3-1-405b-instruct-v1:0",
                      "bedrock@meta.llama3-1-70b-instruct-v1:0",
                      "bedrock@meta.llama3-1-8b-instruct-v1:0",
                      "bedrock@meta.llama3-2-11b-instruct-v1:0",
                      "bedrock@meta.llama3-2-1b-instruct-v1:0",
                      "bedrock@meta.llama3-2-3b-instruct-v1:0",
                      "bedrock@meta.llama3-2-90b-instruct-v1:0",
                      "bedrock@meta.llama3-3-70b-instruct-v1:0",
                      "bedrock@mistral.mistral-7b-instruct-v0:2",
                      "bedrock@mistral.mistral-large-2402-v1:0",
                      "bedrock@mistral.mistral-large-2407-v1:0",
                      "bedrock@mistral.mistral-small-2402-v1:0",
                      "bedrock@mistral.mixtral-8x7b-instruct-v0:1",
                      "cohere@command-r7b-12-2024",
                      "cohere@command-r-plus-08-2024",
                      "cohere@command-r-plus-04-2024",
                      "cohere@command-r-plus",
                      "cohere@command-r-08-2024",
                      "cohere@command-r-03-2024",
                      "cohere@command-r",
                      "cohere@command",
                      "cohere@command-nightly",
                      "cohere@command-light",
                      "cohere@command-light-nightly",
                      "cohere@c4ai-aya-expanse-8b",
                      "cohere@c4ai-aya-expanse-32b",
                      "gemini@gemini-1.5-pro",
                      "gemini@gemini-1.5-flash-8b",
                      "gemini@gemini-1.5-flash",
                      "openai@gpt-4o",
                      "openai@gpt-4o-2024-08-06",
                      "openai@gpt-4o-mini",
                      "openai@gpt-4o-mini-2024-07-18",
                      "openai@o1",
                      "openai@o1-2024-12-17",
                      "openai@o1-mini",
                      "openai@o1-mini-2024-09-12",
                      "groq@distil-whisper-large-v3-en",
                      "groq@gemma2-9b-it",
                      "groq@llama-3.3-70b-versatile",
                      "groq@llama-3.1-8b-instant",
                      "groq@mixtral-8x7b-32768"
                    ],
                    "description": "List of model with providers, using the format {provider}@{model-slug}"
                  },
                  "forbidden": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "description": "a list of words or phrases that must not appear. Uses case-insensitive matching to determine if they're used. If omitted, a English language profanity check is performed."
                  }
                },
                "required": ["id"],
                "additionalProperties": false,
                "description": "Check if profanity is included."
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/$defs/EvalAnywhereEvaluation/properties/checks/items/anyOf/0/properties/name"
                  },
                  "id": {
                    "type": "string",
                    "const": "aligned"
                  },
                  "model": {
                    "$ref": "#/$defs/EvalAnywhereEvaluation/properties/checks/items/anyOf/0/properties/model",
                    "description": "List of model with providers, using the format {provider}@{model-slug}"
                  },
                  "instructions": {
                    "type": "string",
                    "description": "Instructions to give an LLM to determine if the task has been performed adequately."
                  }
                },
                "required": ["id", "instructions"],
                "additionalProperties": false,
                "description": "Check if returned value is roughly aligned."
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/$defs/EvalAnywhereEvaluation/properties/checks/items/anyOf/0/properties/name"
                  },
                  "id": {
                    "type": "string",
                    "const": "exact_match"
                  },
                  "value": {
                    "type": "string",
                    "description": "The exact match to check against."
                  },
                  "case_insensitive": {
                    "type": "boolean",
                    "description": "Whether to perform the match in a case insensitive way.",
                    "default": false
                  }
                },
                "required": ["id", "value"],
                "additionalProperties": false,
                "description": "Check if returned value is an exact match."
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/$defs/EvalAnywhereEvaluation/properties/checks/items/anyOf/0/properties/name"
                  },
                  "id": {
                    "type": "string",
                    "const": "tool_call"
                  },
                  "tool_calls": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "tool_name": {
                          "type": "string",
                          "description": "the name of the tool called"
                        },
                        "args": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "object",
                              "additionalProperties": {}
                            },
                            {
                              "type": "null"
                            },
                            {
                              "type": "number"
                            },
                            {
                              "type": "boolean"
                            },
                            {
                              "type": "array"
                            }
                          ],
                          "description": "the arguments passed for the tool call."
                        }
                      },
                      "required": ["tool_name", "args"],
                      "additionalProperties": false
                    }
                  }
                },
                "required": ["id", "tool_calls"],
                "additionalProperties": false,
                "description": "Determine if a tool call is made appropriately."
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/$defs/EvalAnywhereEvaluation/properties/checks/items/anyOf/0/properties/name"
                  },
                  "id": {
                    "type": "string",
                    "const": "structured_output"
                  },
                  "result": {
                    "anyOf": [
                      {
                        "type": "string",
                        "description": "the JSON object"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "string",
                            "description": "An absolute or relative path where the result can be loaded from"
                          }
                        },
                        "required": ["path"],
                        "additionalProperties": false,
                        "description": "a path where the "
                      },
                      {}
                    ],
                    "description": "the arguments passed for the tool call."
                  }
                },
                "required": ["id"],
                "additionalProperties": false,
                "description": "Check structured ouptut for equivalence."
              },
              {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/$defs/EvalAnywhereEvaluation/properties/checks/items/anyOf/0/properties/name"
                  },
                  "id": {
                    "type": "string",
                    "const": "custom"
                  },
                  "model": {
                    "$ref": "#/$defs/EvalAnywhereEvaluation/properties/checks/items/anyOf/0/properties/model",
                    "description": "List of model with providers, using the format {provider}@{model-slug}"
                  },
                  "arguments": {}
                },
                "required": ["id"],
                "additionalProperties": false
              }
            ]
          },
          "minItems": 1,
          "description": "a list of checks to perform on every evaluation case."
        },
        "evaluations": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "A name describing this evaluation"
              },
              "messages": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "role": {
                          "type": "string",
                          "const": "user",
                          "description": "The assumed role of the entity responsible for this message."
                        },
                        "content": {
                          "type": "string",
                          "description": "The content of the message."
                        },
                        "name": {
                          "type": "string",
                          "description": "A name to assume in the context of few shot message. This is helpful to distinguish from real messages the user may send."
                        }
                      },
                      "required": ["role", "content"],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "role": {
                          "type": "string",
                          "const": "assistant",
                          "description": "The assumed role of the entity responsible for this message."
                        },
                        "content": {
                          "type": "string",
                          "description": "The content of the message."
                        },
                        "tool_calls": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The ID of the function call"
                              },
                              "function": {
                                "type": "object",
                                "properties": {
                                  "arguments": {
                                    "type": "string",
                                    "description": "The stringified JSON arguments"
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the function to call"
                                  }
                                },
                                "required": ["arguments", "name"],
                                "additionalProperties": false
                              },
                              "type": {
                                "type": "string",
                                "const": "function"
                              }
                            },
                            "required": ["id", "function", "type"],
                            "additionalProperties": false
                          },
                          "minItems": 1
                        }
                      },
                      "required": ["role", "content"],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "properties": {
                        "role": {
                          "type": "string",
                          "const": "tool",
                          "description": "The assumed role of the entity responsible for this message."
                        },
                        "content": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "const": "tool-result"
                              },
                              "toolCallId": {
                                "type": "string",
                                "description": "ID of the tool call that this result is associated with."
                              },
                              "toolName": {
                                "type": "string",
                                "description": "Name of the tool that generated this result."
                              },
                              "result": {
                                "anyOf": [
                                  {
                                    "type": "object",
                                    "properties": {},
                                    "additionalProperties": false
                                  },
                                  {
                                    "type": "boolean"
                                  },
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "isError": {
                                "type": "boolean",
                                "description": "Optional flag if the result is an error or an error message."
                              }
                            },
                            "required": [
                              "type",
                              "toolCallId",
                              "toolName",
                              "result",
                              "isError"
                            ],
                            "additionalProperties": false
                          }
                        },
                        "tool_call_id": {
                          "type": "string",
                          "description": "The ID of the tool call. Must match an actual tool call."
                        }
                      },
                      "required": ["role", "content", "tool_call_id"],
                      "additionalProperties": false
                    }
                  ]
                },
                "minItems": 1,
                "description": "An array of messages to include run with the prompt."
              },
              "checks": {
                "type": "array",
                "items": {
                  "$ref": "#/$defs/EvalAnywhereEvaluation/properties/checks/items"
                },
                "minItems": 1,
                "description": "a list of checks to perform for this specific eval. Merged with the general list."
              }
            },
            "required": ["messages"],
            "additionalProperties": false
          },
          "minItems": 1,
          "description": "A list of evaluations to run"
        }
      },
      "required": ["evaluations"],
      "additionalProperties": false,
      "description": "A JSON schema for eval.yaml files. See https://github.com/sjones6/eval-anywhere for more information"
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#"
}
