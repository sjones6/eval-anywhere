{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/sjones6/eval-anywhere/blob/main/schemas/eval-schema.yaml.json",
  "title": "Eval Anywhere Eval",
  "description": "A JSON schema for eval.yaml files. See https://github.com/sjones6/eval-anywhere for more information",
  "type": "object",
  "$defs": {
    "message": {
      "oneOf": [
        {
          "type": "object",
          "required": ["role", "content"],
          "properties": {
            "role": {
              "type": "string",
              "const": "user",
              "description": "The assumed role of the entity responsible for this message."
            },
            "content": {
              "type": "string",
              "description": "The content of the message."
            },
            "name": {
              "type": "string",
              "description": "A name to assume in the context of few shot message. This is helpful to distinguish from real messages the user may send."
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": ["role", "content"],
          "properties": {
            "role": {
              "type": "string",
              "const": "assistant",
              "description": "The assumed role of the entity responsible for this message."
            },
            "content": {
              "type": ["string", "null"],
              "description": "The content of the message."
            },
            "tool_calls": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the function call"
                  },
                  "function": {
                    "type": "object",
                    "properties": {
                      "arguments": {
                        "type": "string",
                        "description": "The stringified JSON arguments"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the function to call"
                      }
                    },
                    "required": ["arguments", "name"],
                    "additionalProperties": false
                  },
                  "type": {
                    "type": "string",
                    "const": "function"
                  }
                },
                "required": ["id", "function", "type"],
                "additionalProperties": false
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": ["role", "content", "tool_call_id"],
          "properties": {
            "role": {
              "type": "string",
              "const": "tool",
              "description": "The assumed role of the entity responsible for this message."
            },
            "content": {
              "type": "string",
              "description": "The stringified JSON of the tool call response."
            },
            "tool_call_id": {
              "type": "string",
              "description": "The ID of the tool call. Must match an actual tool call."
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "check": {
      "type": "object",
      "description": "An eval check to perform on the response.",
      "anyOf": [
        {
          "type": "object",
          "description": "Check if profanity is included.",
          "required": ["id"],
          "properties": {
            "id": {
              "type": "string",
              "constant": "profanity"
            },
            "forbidden": {
              "type": "array",
              "description": "a list of words or phrases that must not appear. Uses case-insensitive matching to determine if they're used. If omitted, a English language profanity check is performed.",
              "items": {
                "type": "string"
              },
              "minItems": 1
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "description": "Check if returned value is roughtly aligned.",
          "required": ["id", "instructions"],
          "properties": {
            "id": {
              "type": "string",
              "constant": "aligned"
            },
            "instructions": {
              "type": "string",
              "description": "Instructions to give an LLM to determine if the task has been performed adequately."
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "description": "Check if returned value is an exact match.",
          "required": ["id", "value"],
          "properties": {
            "id": {
              "type": "string",
              "constant": "exact_match"
            },
            "value": {
              "type": "string",
              "description": "The exact match to check against."
            },
            "case_insensitive": {
              "type": "boolean",
              "default": false,
              "description": "Whether to perform the match in a case insensitive way."
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "description": "Check if returned value is an exact match.",
          "required": ["id"],
          "properties": {
            "id": {
              "type": "string",
              "description": "the ID of the custom check."
            }
          },
          "additionalProperties": true
        }
      ]
    },
    "model": {
      "type": "string",
      "anyOf": [
        {
          "type": "string",
          "description": "List of model with providers, using the format {provider}@{model-slug}",
          "enum": [
            "anthropic@claude-3-5-sonnet-20241022",
            "anthropic@claude-3-5-sonnet-latest",
            "anthropic@claude-3-5-haiku-20241022",
            "anthropic@claude-3-5-haiku-latest",
            "anthropic@claude-3-opus-20240229",
            "anthropic@claude-3-opus-latest",
            "anthropic@claude-3-sonnet-20240229",
            "anthropic@claude-3-haiku-20240307",
            "bedrock@ai21.jamba-1-5-large-v1:0",
            "bedrock@ai21.jamba-1-5-mini-v1:0",
            "bedrock@ai21.jamba-instruct-v1:0",
            "bedrock@amazon.nova-lite-v1:0",
            "bedrock@amazon.nova-micro-v1:0",
            "bedrock@amazon.nova-pro-v1:0",
            "bedrock@amazon.rerank-v1:0",
            "bedrock@amazon.titan-embed-text-v1",
            "bedrock@amazon.titan-embed-text-v2:0",
            "bedrock@amazon.titan-text-express-v1",
            "bedrock@amazon.titan-text-lite-v1",
            "bedrock@amazon.titan-text-premier-v1:0",
            "bedrock@amazon.titan-tg1-large",
            "bedrock@anthropic.claude-v2",
            "bedrock@anthropic.claude-v2:1",
            "bedrock@anthropic.claude-3-haiku-20240307-v1:0",
            "bedrock@anthropic.claude-3-opus-20240229-v1:0",
            "bedrock@anthropic.claude-3-sonnet-20240229-v1:0",
            "bedrock@anthropic.claude-3-5-haiku-20241022-v1:0",
            "bedrock@anthropic.claude-3-5-sonnet-20240620-v1:0",
            "bedrock@anthropic.claude-3-5-sonnet-20241022-v2:0",
            "bedrock@anthropic.claude-instant-v1",
            "bedrock@cohere.command-text-v14",
            "bedrock@cohere.command-light-text-v14",
            "bedrock@cohere.command-r-v1:0",
            "bedrock@cohere.command-r-plus-v1:0",
            "bedrock@cohere.embed-english-v3",
            "bedrock@cohere.embed-multilingual-v3",
            "bedrock@cohere.rerank-v3-5:0",
            "bedrock@meta.llama3-70b-instruct-v1:0",
            "bedrock@meta.llama3-8b-instruct-v1:0",
            "bedrock@meta.llama3-1-405b-instruct-v1:0",
            "bedrock@meta.llama3-1-70b-instruct-v1:0",
            "bedrock@meta.llama3-1-8b-instruct-v1:0",
            "bedrock@meta.llama3-2-11b-instruct-v1:0",
            "bedrock@meta.llama3-2-1b-instruct-v1:0",
            "bedrock@meta.llama3-2-3b-instruct-v1:0",
            "bedrock@meta.llama3-2-90b-instruct-v1:0",
            "bedrock@meta.llama3-3-70b-instruct-v1:0",
            "bedrock@mistral.mistral-7b-instruct-v0:2",
            "bedrock@mistral.mistral-large-2402-v1:0",
            "bedrock@mistral.mistral-large-2407-v1:0",
            "bedrock@mistral.mistral-small-2402-v1:0",
            "bedrock@mistral.mixtral-8x7b-instruct-v0:1",
            "cohere@command-r7b-12-2024",
            "cohere@command-r-plus-08-2024",
            "cohere@command-r-plus-04-2024",
            "cohere@command-r-plus",
            "cohere@command-r-08-2024",
            "cohere@command-r-03-2024",
            "cohere@command-r",
            "cohere@command",
            "cohere@command-nightly",
            "cohere@command-light",
            "cohere@command-light-nightly",
            "cohere@c4ai-aya-expanse-8b",
            "cohere@c4ai-aya-expanse-32b",
            "gemini@gemini-1.5-pro",
            "gemini@gemini-1.5-flash-8b",
            "gemini@gemini-1.5-flash",
            "openai@gpt-4o",
            "openai@gpt-4o-2024-08-06",
            "openai@gpt-4o-mini",
            "openai@gpt-4o-mini-2024-07-18",
            "openai@o1",
            "openai@o1-2024-12-17",
            "openai@o1-mini",
            "openai@o1-mini-2024-09-12",
            "groq@distil-whisper-large-v3-en",
            "groq@gemma2-9b-it",
            "groq@llama-3.3-70b-versatile",
            "groq@llama-3.1-8b-instant",
            "groq@mixtral-8x7b-32768"
          ]
        },
        {
          "description": "A custom model definition.",
          "type": "string"
        }
      ],
      "description": "The default model to use with this prompt. Ultimately, the target runtime will choose a supported prompt."
    }
  },
  "required": ["evals"],
  "properties": {
    "checks": {
      "type": "array",
      "description": "a list of checks to perform on every eval",
      "items": {
        "$ref": "#/$defs/check"
      },
      "minItems": 1
    },
    "evals": {
      "type": "array",
      "description": "A list of evals to run",
      "items": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "description": "An array of messages to include run with the prompt.",
            "items": {
              "$ref": "#/$defs/message"
            },
            "minItems": 1
          },
          "checks": {
            "type": "array",
            "description": "a list of checks to perform for this specific eval. Merged with the general list.",
            "items": {
              "ref": "#/$defs/check"
            },
            "minItems": 1
          }
        },
        "additionalProperties": false
      },
      "minItems": 1
    }
  },
  "additionalProperties": false
}
